<?xml version="1.0" encoding="UTF-8"?>
<protocol name="xdg_toplevel_icon_v1">

  <copyright>
    Copyright Â© 2023-2024 Matthias Klumpp

    Permission is hereby granted, free of charge, to any person obtaining a
    copy of this software and associated documentation files (the "Software"),
    to deal in the Software without restriction, including without limitation
    the rights to use, copy, modify, merge, publish, distribute, sublicense,
    and/or sell copies of the Software, and to permit persons to whom the
    Software is furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice (including the next
    paragraph) shall be included in all copies or substantial portions of the
    Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
    THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
    DEALINGS IN THE SOFTWARE.
  </copyright>

  <description summary="protocol to assign explicit icons to toplevels">
    This protocol allows clients to set icons for their toplevel surfaces
    either via an XDG icon stock (using an icon name), or from pixel data.

    A toplevel icon represents the individual toplevel (unlike the application
    or launcher icon, which represents the application as a whole), and may be
    shown in window switchers, window overviews and taskbars that list
    individual windows.

    This document adheres to RFC 2119 when using words like "must",
    "should", "may", etc.

    Warning! The protocol described in this file is currently in the testing
    phase. Backward compatible changes may be added together with the
    corresponding interface version bump. Backward incompatible changes can
    only be done by creating a new major version of the extension.
  </description>

  <interface name="xdg_toplevel_icon_manager_v1" version="1">
    <description summary="interface to set toplevel window icons">
    </description>

    <request name="destroy" type="destructor">
      <description summary="destroys the toplevel icon manager">
        Destroy the toplevel icon manager. This doesn't destroy objects created with the manager.
      </description>
    </request>

    <request name="create_icon">
        <description summary="create new icon instance">
            Creates a new icon object. This icon can then be attached to a
            window via the set_icon request.
        </description>
        <arg name="id" type="new_id" interface="xdg_toplevel_icon_v1"/>
      </request>

    <request name="set_icon">
      <description summary="sets an icon on a window">
        Sets the window to the provided icon.

        This state is double-buffered and is applied on the next
        wl_surface.commit of the toplevel.

        After making this call xdg_toplevel_icon_v1 is now inert
        any changes will be ignored.
        The same xdg_toplevel_icon_v1 icon cannot be set on multple windows.

        Setting the icon to null will clear any previously set icon.
      </description>
      <arg name="toplevel" type="object" interface="xdg_toplevel"/>
      <arg name="icon" type="object" interface="xdg_toplevel_icon_v1" allow-null="true"/>
    </request>

    <event name="icon_size">
      <description summary="describes a supported icon size">
        This event indicates an icon size the compositor prefers to be
        available if the client can render it.

        Multiple icon_size events will be sent on binding to this interface,
        or if the preferred size changes.

        A sequence of 'icon_size' events is finished with a 'done' event.
      </description>
      <arg name="size" type="int"
	   summary="the edge size of the square icon in surface-local coordinates, e.g. 64"/>
      <arg name="scale" type="int"
	   summary="the scaling factor of the icon, e.g. 1"/>
    </event>

    <event name="done">
      <description summary="all information has been sent">
        This event is sent after all 'icon_size' events have been sent.
      </description>
    </event>
  </interface>

  <interface name="xdg_toplevel_icon_v1" version="1">
    <description summary="interface to set toplevel window icons">
      This interface provides a way for clients to set a dedicated icon for
      their toplevels to represent them in overviews.

      Icons are supposed to be static, and while it is allowed to change an
      icon for an already existing window, icons should not be used to convey
      status information or try to be animated.
      Compositors may rate-limit toplevel icon changes.

      An icon can either be set from an XDG stock icon via 'set_icon_name' or
      from pixel data via 'set_icon_buffer'.

      In case both pixel data and an icon name are set by the client, the named
      icon must always be preferred as long as it is valid and found in the
      current theme.

      The compositor may alter the icon as it sees fit (for example, scale it,
      desaturate it or tint it) in order to integrate it with the environment.
    </description>

    <enum name="error">
      <entry name="wrong_format" summary="the provided icon does not match the requested format"
	     value="1"/>
    </enum>

    <request name="destroy" type="destructor">
      <description summary="destroys the icon object">
        Destroys the xdg_toplevel_icon_v1 object. The icon remains set on the window.
      </description>
    </request>

    <request name="set_icon_name">
      <description summary="set icon name">
        This request assigns an icon to 'toplevel' using its XDG icon-theme
        name, overriding any previously set name.

        The request must specify an icon name for a stock icon in the icon
        theme.

        The compositor must resolve 'icon_name' according to the lookup rules
        described in the XDG icon theme specification[1] using the
        environment's current icon theme.
      </description>
      <arg name="icon_name" type="string"/>
    </request>

    <request name="set_icon_buffer">
      <description summary="set a toplevel icon from a pixel buffer">
        This request assigns adds pixel data
        supplied as wl_buffer to the icon.

        This request provides the compositor with pixel data for the window
        icon of 'toplevel' for the scaling factor 'scale'.

        The client should submit pixel data for all icon sizes it can provide.

        The wl_buffer supplying pixel data as 'icon' must be backed by wl_shm
        and must be a square (width and height being equal).
        If any of these buffer requirements are not fulfilled, a 'wrong_format'
        error must be raised.

        The client may invoke this request multiple times to provide an icon in
        multiple sizes.

        If the compositor already has a buffer of the same size and scale from
        a previous 'set_icon_buffer' request, data from the latest request
        overrides the preexisting pixel data.
      </description>
      <arg name="icon" type="object" interface="wl_buffer"/>
      <arg name="scale" type="int"
	   summary="the scaling factor of the icon, e.g. 1"/>
    </request>
  </interface>
</protocol>
